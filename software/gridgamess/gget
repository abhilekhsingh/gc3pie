#!/usr/bin/env python

__author__="Sergio Maffioletti (sergio.maffioletti@gc3.uzh.ch)"
__date__="01 January 2009"
__copyright__="Copyright 2009 2011 Grid Computing Competence Center - UZH/GC3"
__version__="0.1a"

import logging
import os
import sys
from optparse import OptionParser

from gc3utils.campusgrid import *
from gc3utils import campusgrid

default_config_file_location="$HOME/.gc3/config"
resource_list = {}
defaults = {}

LRMSLOG_PREFIX='=== gget ===\n'

def main():

  try:
    # Parse command line arguments

    _usage = "Usage: %prog [options] jobid"
    parser = OptionParser(usage=_usage)
    parser.add_option("-v", action="count", dest="verbosity", default=0, help="Set verbosity level")
    (options, args) = parser.parse_args()

    # Configure logging service
    configure_logging(options.verbosity)

    if len(args) != 1:
      logging.critical('Command line argument parsing\t\t\t[ failed ]\n\tIncorrect number of arguments; expected 1 got %d ',len(args))
      parser.print_help()
      raise Exception('wrong number on arguments')


    logging.info('Parsing command line arguments\t\t[ ok ]')
    
    lrms_jobid = args[0]

    # read configuration file
    (defaults,resource_list) = readConfig(default_config_file_location)

    logging.info('Loading configuration file\t\t\t[ ok ]')

    if ( (os.path.exists(lrms_jobid) == False ) | (os.path.isdir(lrms_jobid) == False) | ( not check_inputfile(lrms_jobid+'/'+defaults['lrms_jobid']) ) ):
      logging.critical('Jobid Not valid')
      raise Exception('invalid jobid')

    logging.info('lrms_jobid file check\t\t\t[ ok ]')

    # check .finished file
    if ( not check_inputfile(lrms_jobid+'/'+defaults['lrms_finished']) ):
      _fileHandle = open(lrms_jobid+'/'+defaults['lrms_jobid'],'r')
      _raw_resource_info = _fileHandle.read()
      _fileHandle.close()

      _list_resource_info = re.split('\t',_raw_resource_info)

      logging.debug('lrms_jobid file returned %s elements',len(_list_resource_info))

      if ( len(_list_resource_info) != 2 ):
        raise Exception('failed retieving jobid')

      logging.debug('frontend: [ %s ] jobid: [ %s ]',_list_resource_info[0],_list_resource_info[1])
      logging.info('reading lrms_jobid info\t\t\t[ ok ]')

      if ( _list_resource_info[0] in resource_list ):
        logging.debug('Found match for resource [ %s ]',_list_resource_info[0])
        logging.debug('Creating lrms instance')
        resource = resource_list[_list_resource_info[0]]
        if ( resource['type'] == "arc" ):
          lrms = ArcLrms(resource)
        elif ( resource['type'] == "ssh"):
          logging.warning('SSH not yet implemented')
          raise Exception('could not instantiate LRMS')
        else:
          logging.error('Unknown resource type %s',resource['type'])
          raise  Exception('unknown resource type')

        if ( (lrms.isValid != 1) | (lrms.check_authentication() == False) ):
          logging.error('Failed validating lrms instance for resource %s',resource['resource_name'])
          raise Exception('failed authenticating to LRMS')

        logging.info('Init LRMS\t\t\t[ ok ]')
        _lrms_jobid = _list_resource_info[1]
        #_lrms_dirfolder = dirname(lrms_jobid)
        (retval,lrms_log) = lrms.get_results(_lrms_jobid,lrms_jobid)

        # dump lrms_log
        try:
          logging.debug('Dumping lrms_log')
          _fileHandle = open(lrms_jobid+'/'+defaults['lrms_log'],'a')
          _fileHandle.write(LRMSLOG_PREFIX)
          _fileHandle.write(lrms_log+'\n')
          _fileHandle.close()
        except:
          logging.error('Failed dumping lrms_log [ %s ]',sys.exc_info()[1])

        if ( retval == False ):
          logging.error('Failed getting results')
          raise Exception('failed getting results from LRMS')

        logging.debug('check_status\t\t\t[ ok ]')

        # Job finished; resutls retrieved; writing .finished file
        try:
          logging.debug('Creating finished file')
          open(lrms_jobid+"/"+defaults['lrms_finished'],'w').close()      
        except:
          logging.error('Failed creating finished file [ %s ]',sys.exc_info()[1])
          # Should handle the exception differently ?
        
      else:
        logging.critical('Failed finding matching resource name [ %s ]',_list_resource_info[0])
        raise

    sys.stdout.write('Job results successfully retrieved in [ '+lrms_jobid+' ]\n')
    sys.stdout.flush

    return 0

  except:
    logging.info('%s',sys.exc_info()[1])
    print "gget failed: "+str(sys.exc_info()[1])
    return 1

if __name__ == "__main__":
  sys.exit(main())
