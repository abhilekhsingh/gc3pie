= The `gc3utils` software =

The `gc3utils` software is a command line front-end to manage
computational job submission to different batch processing systems.
Indeed, `gc3utils` commands can submit GAMESS jobs to the
[http://www.smscg.ch SMSCG Grid] or to any computational cluster you
can ssh into (however, currently only the SGE batch systems manager is
supported).

In addition to the command-line interface, `gc3utils` also offer a
Python library for more flexible job submission and control, but that
is an advanced topic and will not be covered here.

== Glossary ==

* _Core_: A single computing unit; this was called a CPU until manufacturers started packing many processing units into a single package: now the term CPU is used for the package, and "core" is one of the several independent processing units within the package.
* _Job_: A computational job is a single run of a non-interactive application.  The prototypical example is a run of GAMESS on a single input file.
* _Resource_: Short for "computational resource": any cluster or Grid where a job can run.
* _Status_: A one-word indication of a computational job execution status (e.g., `RUNNING` or `FAILED`).
* _walltime_: Short for "wall-clock time": indicates the total running time of a job.



== The supported computational job workflow ==

A computational job (_job_, for short) is a single run of a
non-interactive application.  The prototypical example is a run of
GAMESS on a single input file.

The `gc3utils` commands support the following workflow:

# Submit a GAMESS job (with a single input file).
# Monitor the status of the submitted jobs.
# Retrieve the output of a job once it's finished.

There are only three commands that you will likely use in day-to-day
operations, corresponding to the above three steps of the workflow:
_*gsub*_ (for submitting jobs), _*gstat*_ (for monitoring status),
and _*gget*_ (for retrieving output).  Thir usage and some examples
are provided in the next sections.

Some additional commands are provided to obtain the list and status of
computational resources (_*glist*_); to clear the list of jobs from
old and failed ones (_*gclean*_); to get detailed information on a
submitted job (_*ginfo*_, mainly for debugging purposes).


= _*gsub*_: submit a GAMESS job =

To submit a GAMESS job with input file _INPUT.inp_, just type into a
terminal window:
<pre>
  gsub gamess INPUT.inp
</pre>
The `gc3utils` will automatically choose an execution cluster for you,
based on which of the available compute resources has the most free slots.

In case of _successful_ submission, this message will be printed
on the screen:
<pre>
  Successfully submitted job.42; use the 'gstat' command to monitor its progress.
</pre>
(Of course the job number will change!)  The _*gsub*_ command will
print a different message if something went wrong.

Immediately after running the _*gsub*_ command, you should be able
to see a new job in the _*gstat*_ output.

If you want to specify which
[http://en.wikipedia.org/wiki/Batch_system batch system] should run your
computations, you can use the _-r_ option followed by the resource
name like this:
<pre>
  gsub -r nh64 INPUT.inp
</pre>
You can look up resource names in the configuration file 
_~/.gc3/gc3utils.conf_.

The _*gsub*_ command will also pick up a default job size (in terms of
CPU cores, allocated memory, and maximum run-time) for your GAMESS
job.  Currently, the default job size is: 2 CPU cores, 1GB of memory
per core, and 1 hour of run-time.

One size does _not_ fit all, so you might want to specify how many
CPU cores and memory your job needs with the _-c_ and the _-m_
options, followed (respectively) by the number of CPU cores and
GigaBytes of memory requested.  For instance, the following command:
<pre>
  gsub -c 8 -m 2 gamess INPUT.inp
</pre>
will run GAMESS on the input file _INPUT.inp_ with 8 CPU cores and
allocate 16GB of memory (2GB per CPU core).

Similarly, you can specify an upper bound to the runing time of a job
with the _-w_ option followed by the number of hours that the job
should be allowed to run (maximum).  For instance:
<pre>
  gsub -w 8 gamess INPUT.inp
</pre>
will run GAMESS on file _INPUT.inp_ for (at most) 8 hours.

All the above options can be combined and given in any order in a
single command line.  For example, all the following commands are
equivalent; they do the same thing, i.e., run GAMESS on file
_INPUT.inp_ on 8 CPU cores, 16 GB of memory, and for a maximum
run-time of 10 hours:
<pre>
  gsub -c 8 -m 2 -w 10 gamess INPUT.inp
  gsub -m 2 -c 8 -w 10 gamess INPUT.inp
  gsub -w 10 -c 8 -m 2 gamess INPUT.inp
  gsub -w 10 -m 2 -c 8 gamess INPUT.inp
</pre>


= _*gstat*_: monitor the status of submitted jobs =

To see the status of all the jobs you have submitted, use the
_*gstat*_ command.  Typing:
<pre>
  gstat
</pre>
will print to the screen a table like the following:
<pre>
Job ID            Status    
===========================
job.12            COMPLETED 
job.15            FINISHED  
job.16            RUNNING
job.17            RUNNING
job.23            SUBMITTED
</pre>
A job can be in one and only one of the following states:
* `COMPLETED`: The job has finished running and output has been retrieved; use the _*gclean*_ command to remove this job from the list.
* `FINISHED`: The job has finished running but the output files have not yet been copied back from the execution cluster; use the _*gget*_ command to get the output back.
* `RUNNING`: The job is currently running -- there's nothing to do but wait.
* `SUBMITTED`: The job has been sent to a compute resource for execution -- it should change to `RUNNING` status eventually.
* `FAILED`: Something went wrong during the execution of the job, so it did not complete its execution or -possibly- it did not even start. You can use the _*ginfo*_ command to try to debug the problem.

The list of submitted jobs persists from one session to the other: you
can log off, shut your computer down, then turn it on again next day
and you will see the same list of jobs.

_Nota Bene 1:_ If you have never submitted any job, or if you have
cleared your job list with the _*gclean*_ command, then _*gstat*_
will print _nothing_ to the screen!

_Nota Bene 2:_ Completed jobs persist in the _*gstat*_ list until
they are cleared off with the _*gclean*_ command.


= _*gget*_: retrieve the output of finished jobs =

Once a job has reached `RUNNING` status (check with _*gstat*_),
you can retrieve its output files with the _*gget*_ command.  For
instance, to download the output files of _job.15_ you would use:
<pre>
  gget job.15
</pre>
This command will print out a message like:
<pre>
  Job results successfully retrieved in '/path/to/some/directory'
</pre>

On your computer, you can copy+paste the path within quotes to the
"sftp" command to get the files to your usual workstation.  For
example, you can run the following command in a terminal on your
computer to get the output files back to your workstation:
<pre>
  sftp ocikbgtw:'/path/to/some/directory'
</pre>
This will take you to the directory where the output files have been stored.


= _*gclean*_: remove a completed job from the status list =

Jobs persist in the _*gstat*_ list until they are cleared off; you
need to use the _*gclean*_ command for that.

Just call the _*gclean*_ command followed by the job identifier
_job.NNN_.  For example:
<pre>
  gclean job.23
</pre>

You can only remove jobs that are in the `COMPLETED`, `FAILED` or
`DELETED` status; trying to remove any other kind of job results in
an error.


= _*gresub*_: re-submit a failed jobs =

In case a job failed for accidental causes (e.g., the site where it
was running went unexpectedly down), you can re-submit it with the
_*gresub*_ command.

Just call _*gresub*_  followed by the job identifier
_job.NNN_.  For example:
<pre>
  gresub job.42
</pre>

Resubmitting a job that is not in a terminal state (e.g., `FAILED`,
`DELETED`, or `COMPLETED`) results in the job being killed (as with
_*gkill*_) before being submitted again.
